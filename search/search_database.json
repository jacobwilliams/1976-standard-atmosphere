var tipuesearch = {"pages":[{"title":" standard-atmosphere ","text":"standard-atmosphere 1976 Standard Atmosphere in Modern Fortran The U.S. Committee on Extension to the Standard Atmosphere (COESA) atmosphere\nmodel, also known as the U.S. Standard Atmosphere, 1976. A Fortran translation of the Julia code from COESA.jl . Just an experiment. Has not been validated. Implementation For altitudes below 86 km, the equations from the original report are used.  The\npublished tables have a discontinuity in the mean molecular weight and\ntemperature at 86 km.  The report outlines how to blend out the discontinuity.\nWe implement this blending here.  In this region, the model output matches the\npublished tables nearly perfectly.  Only a few of the tested altitudes show\ndifferences.  It is only in the pressure values, and in these cases we only miss\nthe least significant digit. For the region above 86 km, the temperature is computed using the equations from\nthe original report, but the equations for the mean molecular weight and\npressure are much more complex.  Instead, we adapt the method from Regan's Re-Entry Vehicle Dynamics to interpolate the tabulated mean molecular weight\nand pressure.  We use a quadratic interpolation on the mean molecular weight and\nthe natural log of the pressure.  Because we are using interpolation, the\ncomputed pressure and density occasionally don't match the published values.\nThe values are very small, and we still have at least 2 significant digits. The density is computed as outlined by the original report. The speed of sound is computed as outlined by the original report for altitudes\nbelow 86 km.  For altitudes above 86 km, the speed of sound at 86 km is used. Compiling A Fortran Package Manager manifest file is included, so that the library and tests cases can be compiled with FPM. For example: fpm build --profile release\nfpm test --profile release To use standard-atmosphere within your fpm project, add the following to your fpm.toml file: [dependencies] standard-atmosphere = { git = \"https://github.com/jacobwilliams/1976-standard-atmosphere.git\" } Documentation The API documentation for the current master branch can be found here .  This is generated by processing the source files with FORD . License This library is released under a permissive license . References \" U.S. Standard Atmosphere, 1976 \". Stock No. 003-017-00323-0. Regan, F.J., \"Re-Entry Vehicle Dynamics\", AIAA Press, New York, 1984. Developer Info Jacob Williams","tags":"home","url":"index.html"},{"title":"State – standard-atmosphere ","text":"type, public :: State Components Type Visibility Attributes Name Initial real(kind=wp), public :: mean_molecular_weight = 0.0_wp real(kind=wp), public :: temperature = 0.0_wp real(kind=wp), public :: pressure = 0.0_wp real(kind=wp), public :: speed_of_sound = 0.0_wp Type-Bound Procedures procedure, public :: density private pure function density (s) Arguments Type Intent Optional Attributes Name class( State ), intent(in) :: s Return Value real(kind=wp) Source Code type , public :: State real ( wp ) :: mean_molecular_weight = 0.0_wp real ( wp ) :: temperature = 0.0_wp real ( wp ) :: pressure = 0.0_wp real ( wp ) :: speed_of_sound = 0.0_wp contains procedure :: density end type State","tags":"","url":"type/state.html"},{"title":"find – standard-atmosphere","text":"private pure function find(x, xvec) result(i) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: x real(kind=wp), intent(in), dimension(:) :: xvec Return Value integer Called by proc~~find~~CalledByGraph proc~find find proc~interpolation_index interpolation_index proc~interpolation_index->proc~find proc~mean_molecular_weight_ratio_lower mean_molecular_weight_ratio_lower proc~mean_molecular_weight_ratio_lower->proc~find proc~pressure_lower pressure_lower proc~pressure_lower->proc~find proc~tm Tm proc~tm->proc~find proc~coesa_atmosphere COESA_atmosphere proc~coesa_atmosphere->proc~pressure_lower proc~mean_molecular_weight_lower mean_molecular_weight_lower proc~coesa_atmosphere->proc~mean_molecular_weight_lower proc~mean_molecular_weight_upper mean_molecular_weight_upper proc~coesa_atmosphere->proc~mean_molecular_weight_upper proc~pressure_upper pressure_upper proc~coesa_atmosphere->proc~pressure_upper proc~temperature_lower temperature_lower proc~coesa_atmosphere->proc~temperature_lower proc~speed_of_sound_86km speed_of_sound_86km proc~coesa_atmosphere->proc~speed_of_sound_86km proc~coesa_density COESA_density proc~coesa_density->proc~pressure_lower proc~coesa_density->proc~mean_molecular_weight_lower proc~coesa_density->proc~mean_molecular_weight_upper proc~coesa_density->proc~pressure_upper proc~coesa_density->proc~temperature_lower proc~mean_molecular_weight_lower->proc~mean_molecular_weight_ratio_lower proc~mean_molecular_weight_upper->proc~interpolation_index proc~pressure_upper->proc~interpolation_index proc~temperature_lower->proc~tm proc~speed_of_sound_86km->proc~mean_molecular_weight_lower proc~speed_of_sound_86km->proc~temperature_lower Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code pure function find ( x , xvec ) result ( i ) real ( wp ), intent ( in ) :: x real ( wp ), dimension (:), intent ( in ) :: xvec integer :: i i = 1 do if ( i >= size ( xvec )) exit if ( x <= xvec ( i + 1 )) exit i = i + 1 end do end function find","tags":"","url":"proc/find.html"},{"title":"density – standard-atmosphere","text":"private pure function density(s) Type Bound State Arguments Type Intent Optional Attributes Name class( State ), intent(in) :: s Return Value real(kind=wp) Source Code pure real ( wp ) function density ( s ) class ( State ), intent ( in ) :: s density = s % pressure * s % mean_molecular_weight / ( Rstar * s % temperature ) end function density","tags":"","url":"proc/density.html"},{"title":"geopotential_altitude – standard-atmosphere","text":"private pure function geopotential_altitude(Z) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: Z Return Value real(kind=wp) Called by proc~~geopotential_altitude~~CalledByGraph proc~geopotential_altitude geopotential_altitude proc~coesa_atmosphere COESA_atmosphere proc~coesa_atmosphere->proc~geopotential_altitude proc~speed_of_sound_86km speed_of_sound_86km proc~coesa_atmosphere->proc~speed_of_sound_86km proc~coesa_density COESA_density proc~coesa_density->proc~geopotential_altitude proc~speed_of_sound_86km->proc~geopotential_altitude Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code pure real ( wp ) function geopotential_altitude ( Z ) real ( wp ), intent ( in ) :: Z geopotential_altitude = r0 * Z / ( r0 + Z ) end function geopotential_altitude","tags":"","url":"proc/geopotential_altitude.html"},{"title":"Tm – standard-atmosphere","text":"private pure function Tm(H) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: H Return Value real(kind=wp) Calls proc~~tm~~CallsGraph proc~tm Tm proc~find find proc~tm->proc~find Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~tm~~CalledByGraph proc~tm Tm proc~temperature_lower temperature_lower proc~temperature_lower->proc~tm proc~coesa_atmosphere COESA_atmosphere proc~coesa_atmosphere->proc~temperature_lower proc~speed_of_sound_86km speed_of_sound_86km proc~coesa_atmosphere->proc~speed_of_sound_86km proc~coesa_density COESA_density proc~coesa_density->proc~temperature_lower proc~speed_of_sound_86km->proc~temperature_lower Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code pure real ( wp ) function Tm ( H ) real ( wp ), intent ( in ) :: H integer :: i i = find ( H , Hb ) Tm = Tmb ( i ) + Lmb ( i ) * ( H - Hb ( i )) end function Tm","tags":"","url":"proc/tm.html"},{"title":"temperature_lower – standard-atmosphere","text":"private pure function temperature_lower(H, M) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: H real(kind=wp), intent(in) :: M Return Value real(kind=wp) Calls proc~~temperature_lower~~CallsGraph proc~temperature_lower temperature_lower proc~tm Tm proc~temperature_lower->proc~tm proc~find find proc~tm->proc~find Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~temperature_lower~~CalledByGraph proc~temperature_lower temperature_lower proc~coesa_atmosphere COESA_atmosphere proc~coesa_atmosphere->proc~temperature_lower proc~speed_of_sound_86km speed_of_sound_86km proc~coesa_atmosphere->proc~speed_of_sound_86km proc~coesa_density COESA_density proc~coesa_density->proc~temperature_lower proc~speed_of_sound_86km->proc~temperature_lower Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code pure real ( wp ) function temperature_lower ( H , M ) real ( wp ), intent ( in ) :: H real ( wp ), intent ( in ) :: M temperature_lower = Tm ( H ) / M0 * M end function temperature_lower","tags":"","url":"proc/temperature_lower.html"},{"title":"pressure_lower – standard-atmosphere","text":"private pure function pressure_lower(H) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: H Return Value real(kind=wp) Calls proc~~pressure_lower~~CallsGraph proc~pressure_lower pressure_lower proc~find find proc~pressure_lower->proc~find Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~pressure_lower~~CalledByGraph proc~pressure_lower pressure_lower proc~coesa_atmosphere COESA_atmosphere proc~coesa_atmosphere->proc~pressure_lower proc~coesa_density COESA_density proc~coesa_density->proc~pressure_lower Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code pure real ( wp ) function pressure_lower ( H ) real ( wp ), intent ( in ) :: H integer :: i i = find ( H , Hb ) if ( Lmb ( i ) == 0 ) then pressure_lower = Pb ( i ) * exp ( - g0 * M0 * ( H - Hb ( i )) / ( Rstar * Tmb ( i ))) else pressure_lower = Pb ( i ) * ( Tmb ( i ) / ( Tmb ( i ) + Lmb ( i ) * ( H - Hb ( i )))) ** ( g0 * M0 / ( Rstar * Lmb ( i ))) end if end function pressure_lower","tags":"","url":"proc/pressure_lower.html"},{"title":"speed_of_sound_lower – standard-atmosphere","text":"private pure function speed_of_sound_lower(T, M) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: T real(kind=wp), intent(in) :: M Return Value real(kind=wp) Called by proc~~speed_of_sound_lower~~CalledByGraph proc~speed_of_sound_lower speed_of_sound_lower proc~coesa_atmosphere COESA_atmosphere proc~coesa_atmosphere->proc~speed_of_sound_lower proc~speed_of_sound_86km speed_of_sound_86km proc~coesa_atmosphere->proc~speed_of_sound_86km proc~speed_of_sound_86km->proc~speed_of_sound_lower Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code pure real ( wp ) function speed_of_sound_lower ( T , M ) real ( wp ), intent ( in ) :: T , M speed_of_sound_lower = sqrt ( gamma * Rstar * T / M ) end function speed_of_sound_lower","tags":"","url":"proc/speed_of_sound_lower.html"},{"title":"mean_molecular_weight_ratio_lower – standard-atmosphere","text":"private pure function mean_molecular_weight_ratio_lower(Z) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: Z Return Value real(kind=wp) Calls proc~~mean_molecular_weight_ratio_lower~~CallsGraph proc~mean_molecular_weight_ratio_lower mean_molecular_weight_ratio_lower proc~find find proc~mean_molecular_weight_ratio_lower->proc~find Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~mean_molecular_weight_ratio_lower~~CalledByGraph proc~mean_molecular_weight_ratio_lower mean_molecular_weight_ratio_lower proc~mean_molecular_weight_lower mean_molecular_weight_lower proc~mean_molecular_weight_lower->proc~mean_molecular_weight_ratio_lower proc~coesa_atmosphere COESA_atmosphere proc~coesa_atmosphere->proc~mean_molecular_weight_lower proc~speed_of_sound_86km speed_of_sound_86km proc~coesa_atmosphere->proc~speed_of_sound_86km proc~coesa_density COESA_density proc~coesa_density->proc~mean_molecular_weight_lower proc~speed_of_sound_86km->proc~mean_molecular_weight_lower Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code pure real ( wp ) function mean_molecular_weight_ratio_lower ( Z ) real ( wp ), intent ( in ) :: Z integer :: i if ( Z < Ztable ( 1 )) then mean_molecular_weight_ratio_lower = 1.0_wp else if ( Z > Ztable ( size ( Ztable ))) then error stop \"altitude above maximum value in table\" else i = find ( Z , Ztable ) mean_molecular_weight_ratio_lower = & Mratiotable ( i ) + ( Mratiotable ( i + 1 ) - Mratiotable ( i )) / & ( Ztable ( i + 1 ) - Ztable ( i )) * ( Z - Ztable ( i )) end if end function mean_molecular_weight_ratio_lower","tags":"","url":"proc/mean_molecular_weight_ratio_lower.html"},{"title":"mean_molecular_weight_lower – standard-atmosphere","text":"private pure function mean_molecular_weight_lower(Z) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: Z Return Value real(kind=wp) Calls proc~~mean_molecular_weight_lower~~CallsGraph proc~mean_molecular_weight_lower mean_molecular_weight_lower proc~mean_molecular_weight_ratio_lower mean_molecular_weight_ratio_lower proc~mean_molecular_weight_lower->proc~mean_molecular_weight_ratio_lower proc~find find proc~mean_molecular_weight_ratio_lower->proc~find Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~mean_molecular_weight_lower~~CalledByGraph proc~mean_molecular_weight_lower mean_molecular_weight_lower proc~coesa_atmosphere COESA_atmosphere proc~coesa_atmosphere->proc~mean_molecular_weight_lower proc~speed_of_sound_86km speed_of_sound_86km proc~coesa_atmosphere->proc~speed_of_sound_86km proc~coesa_density COESA_density proc~coesa_density->proc~mean_molecular_weight_lower proc~speed_of_sound_86km->proc~mean_molecular_weight_lower Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code pure real ( wp ) function mean_molecular_weight_lower ( Z ) real ( wp ), intent ( in ) :: Z mean_molecular_weight_lower = M0 * mean_molecular_weight_ratio_lower ( Z ) end function mean_molecular_weight_lower","tags":"","url":"proc/mean_molecular_weight_lower.html"},{"title":"temperature_upper – standard-atmosphere","text":"private pure function temperature_upper(Z) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: Z Return Value real(kind=wp) Called by proc~~temperature_upper~~CalledByGraph proc~temperature_upper temperature_upper proc~coesa_atmosphere COESA_atmosphere proc~coesa_atmosphere->proc~temperature_upper proc~coesa_density COESA_density proc~coesa_density->proc~temperature_upper Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code pure real ( wp ) function temperature_upper ( Z ) real ( wp ), intent ( in ) :: Z real ( wp ) :: Tc , A , aa , T9 , LK9 , Z9 , T10 , Z10 , Tinf , lambda , xi if ( Z <= 9100 0.0_wp ) then temperature_upper = 18 6.8673_wp ! (K) elseif ( Z <= 11000 0.0_wp ) then Tc = 26 3.1905_wp ! (K) A = - 7 6.3232_wp ! (K) aa = - 1 9.9429_wp * 100 0.0_wp ! (m) temperature_upper = Tc + A * sqrt ( 1.0_wp - (( Z - 9100 0.0_wp ) / aa ) ** 2 ) elseif ( Z <= 12000 0.0_wp ) then T9 = 24 0.0_wp ! (K) LK9 = 1 2.0_wp / 100 0.0_wp ! (K / m) Z9 = 11000 0.0_wp ! (m) temperature_upper = T9 + LK9 * ( Z - Z9 ) elseif ( Z <= 100000 0.0_wp ) then T10 = 36 0.0_wp ! (K) Z10 = 12000 0.0_wp ! (m) Tinf = 100 0.0_wp ! (K) lambda = 0.01875_wp / 100 0.0_wp ! (1 / m) xi = ( Z - Z10 ) * ( r0 + Z10 ) / ( r0 + Z ) temperature_upper = Tinf - ( Tinf - T10 ) * exp ( - lambda * xi ) end if end function temperature_upper","tags":"","url":"proc/temperature_upper.html"},{"title":"interpolation_index – standard-atmosphere","text":"private pure function interpolation_index(Z) result(i) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: Z Return Value integer Calls proc~~interpolation_index~~CallsGraph proc~interpolation_index interpolation_index proc~find find proc~interpolation_index->proc~find Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~interpolation_index~~CalledByGraph proc~interpolation_index interpolation_index proc~mean_molecular_weight_upper mean_molecular_weight_upper proc~mean_molecular_weight_upper->proc~interpolation_index proc~pressure_upper pressure_upper proc~pressure_upper->proc~interpolation_index proc~coesa_atmosphere COESA_atmosphere proc~coesa_atmosphere->proc~mean_molecular_weight_upper proc~coesa_atmosphere->proc~pressure_upper proc~coesa_density COESA_density proc~coesa_density->proc~mean_molecular_weight_upper proc~coesa_density->proc~pressure_upper Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code pure integer function interpolation_index ( Z ) result ( i ) real ( wp ), intent ( in ) :: Z ! Find the index for the lower side of the altitude interval i = find ( Z , Ztableupper ) ! We are going to reference all elements from i - 1 to i + 1, so we need to ! adjust the index away from the boundaries if ( i == 1 ) i = 2 end function interpolation_index","tags":"","url":"proc/interpolation_index.html"},{"title":"pressure_upper – standard-atmosphere","text":"private pure function pressure_upper(Z) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: Z Return Value real(kind=wp) Calls proc~~pressure_upper~~CallsGraph proc~pressure_upper pressure_upper proc~interpolation_index interpolation_index proc~pressure_upper->proc~interpolation_index proc~interpolation_scale_factors interpolation_scale_factors proc~pressure_upper->proc~interpolation_scale_factors proc~find find proc~interpolation_index->proc~find Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~pressure_upper~~CalledByGraph proc~pressure_upper pressure_upper proc~coesa_atmosphere COESA_atmosphere proc~coesa_atmosphere->proc~pressure_upper proc~coesa_density COESA_density proc~coesa_density->proc~pressure_upper Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code pure real ( wp ) function pressure_upper ( Z ) real ( wp ), intent ( in ) :: Z integer :: i real ( wp ) :: logP0 , logP1 , logP2 , logP , scale0 , scale1 , scale2 i = interpolation_index ( Z ) call interpolation_scale_factors ( i , Z , scale0 , scale1 , scale2 ) logP0 = logPtableupper ( i - 1 ) logP1 = logPtableupper ( i ) logP2 = logPtableupper ( i + 1 ) logP = logP0 * scale0 + logP1 * scale1 + logP2 * scale2 pressure_upper = exp ( logP ) end function pressure_upper","tags":"","url":"proc/pressure_upper.html"},{"title":"mean_molecular_weight_upper – standard-atmosphere","text":"private pure function mean_molecular_weight_upper(Z) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: Z Return Value real(kind=wp) Calls proc~~mean_molecular_weight_upper~~CallsGraph proc~mean_molecular_weight_upper mean_molecular_weight_upper proc~interpolation_index interpolation_index proc~mean_molecular_weight_upper->proc~interpolation_index proc~interpolation_scale_factors interpolation_scale_factors proc~mean_molecular_weight_upper->proc~interpolation_scale_factors proc~find find proc~interpolation_index->proc~find Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~mean_molecular_weight_upper~~CalledByGraph proc~mean_molecular_weight_upper mean_molecular_weight_upper proc~coesa_atmosphere COESA_atmosphere proc~coesa_atmosphere->proc~mean_molecular_weight_upper proc~coesa_density COESA_density proc~coesa_density->proc~mean_molecular_weight_upper Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code pure real ( wp ) function mean_molecular_weight_upper ( Z ) real ( wp ), intent ( in ) :: Z integer :: i real ( wp ) :: M0 , M1 , M2 , scale0 , scale1 , scale2 i = interpolation_index ( Z ) call interpolation_scale_factors ( i , Z , scale0 , scale1 , scale2 ) M0 = Mtableupper ( i - 1 ) M1 = Mtableupper ( i ) M2 = Mtableupper ( i + 1 ) mean_molecular_weight_upper = M0 * scale0 + M1 * scale1 + M2 * scale2 end function mean_molecular_weight_upper","tags":"","url":"proc/mean_molecular_weight_upper.html"},{"title":"speed_of_sound_86km – standard-atmosphere","text":"private pure function speed_of_sound_86km() Arguments None Return Value real(kind=wp) Calls proc~~speed_of_sound_86km~~CallsGraph proc~speed_of_sound_86km speed_of_sound_86km proc~geopotential_altitude geopotential_altitude proc~speed_of_sound_86km->proc~geopotential_altitude proc~mean_molecular_weight_lower mean_molecular_weight_lower proc~speed_of_sound_86km->proc~mean_molecular_weight_lower proc~speed_of_sound_lower speed_of_sound_lower proc~speed_of_sound_86km->proc~speed_of_sound_lower proc~temperature_lower temperature_lower proc~speed_of_sound_86km->proc~temperature_lower proc~mean_molecular_weight_ratio_lower mean_molecular_weight_ratio_lower proc~mean_molecular_weight_lower->proc~mean_molecular_weight_ratio_lower proc~tm Tm proc~temperature_lower->proc~tm proc~find find proc~mean_molecular_weight_ratio_lower->proc~find proc~tm->proc~find Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~speed_of_sound_86km~~CalledByGraph proc~speed_of_sound_86km speed_of_sound_86km proc~coesa_atmosphere COESA_atmosphere proc~coesa_atmosphere->proc~speed_of_sound_86km Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code pure real ( wp ) function speed_of_sound_86km () real ( wp ), parameter :: Z = 8600 0.0_wp ! (m) real ( wp ) :: H , M , T H = geopotential_altitude ( Z ) M = mean_molecular_weight_lower ( Z ) T = temperature_lower ( H , M ) speed_of_sound_86km = speed_of_sound_lower ( T , M ) end function speed_of_sound_86km","tags":"","url":"proc/speed_of_sound_86km.html"},{"title":"dynamic_viscosity – standard-atmosphere","text":"private pure function dynamic_viscosity(Z, T) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: Z altitude (m) real(kind=wp), intent(in) :: T temperature (K) Return Value real(kind=wp) Source Code pure real ( wp ) function dynamic_viscosity ( Z , T ) real ( wp ), intent ( in ) :: Z !! altitude (m) real ( wp ), intent ( in ) :: T !! temperature (K) if ( Z > 8600 0.0_wp ) error stop 'unable to compute dynamic viscosity above 86km' dynamic_viscosity = 1.458e-6_wp * T ** ( 3.0_wp / 2.0_wp ) / ( T + 11 0.4_wp ) end function dynamic_viscosity","tags":"","url":"proc/dynamic_viscosity.html"},{"title":"COESA_atmosphere – standard-atmosphere","text":"public  function COESA_atmosphere(Z) result(s) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: Z Return Value type( State ) Calls proc~~coesa_atmosphere~~CallsGraph proc~coesa_atmosphere COESA_atmosphere proc~geopotential_altitude geopotential_altitude proc~coesa_atmosphere->proc~geopotential_altitude proc~mean_molecular_weight_lower mean_molecular_weight_lower proc~coesa_atmosphere->proc~mean_molecular_weight_lower proc~mean_molecular_weight_upper mean_molecular_weight_upper proc~coesa_atmosphere->proc~mean_molecular_weight_upper proc~pressure_lower pressure_lower proc~coesa_atmosphere->proc~pressure_lower proc~pressure_upper pressure_upper proc~coesa_atmosphere->proc~pressure_upper proc~speed_of_sound_86km speed_of_sound_86km proc~coesa_atmosphere->proc~speed_of_sound_86km proc~speed_of_sound_lower speed_of_sound_lower proc~coesa_atmosphere->proc~speed_of_sound_lower proc~temperature_lower temperature_lower proc~coesa_atmosphere->proc~temperature_lower proc~temperature_upper temperature_upper proc~coesa_atmosphere->proc~temperature_upper proc~mean_molecular_weight_ratio_lower mean_molecular_weight_ratio_lower proc~mean_molecular_weight_lower->proc~mean_molecular_weight_ratio_lower proc~interpolation_index interpolation_index proc~mean_molecular_weight_upper->proc~interpolation_index proc~interpolation_scale_factors interpolation_scale_factors proc~mean_molecular_weight_upper->proc~interpolation_scale_factors proc~find find proc~pressure_lower->proc~find proc~pressure_upper->proc~interpolation_index proc~pressure_upper->proc~interpolation_scale_factors proc~speed_of_sound_86km->proc~geopotential_altitude proc~speed_of_sound_86km->proc~mean_molecular_weight_lower proc~speed_of_sound_86km->proc~speed_of_sound_lower proc~speed_of_sound_86km->proc~temperature_lower proc~tm Tm proc~temperature_lower->proc~tm proc~interpolation_index->proc~find proc~mean_molecular_weight_ratio_lower->proc~find proc~tm->proc~find Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code function COESA_atmosphere ( Z ) result ( s ) real ( wp ), intent ( in ) :: Z ! altitude in meters type ( state ) :: s real ( wp ) :: H , M , T , P , c if ( Z < - 500 0.0_wp ) then error stop \"altitude below lower bound of -5000 m\" else if ( Z > 100000 0.0_wp ) then error stop \"altitude above upper bound of 1000000 m\" else if ( Z < 8600 0.0_wp ) then H = geopotential_altitude ( Z ) M = mean_molecular_weight_lower ( Z ) T = temperature_lower ( H , M ) P = pressure_lower ( H ) c = speed_of_sound_lower ( T , M ) else T = temperature_upper ( Z ) P = pressure_upper ( Z ) M = mean_molecular_weight_upper ( Z ) c = speed_of_sound_86km () end if s = State ( M , T , P , c ) end function COESA_atmosphere","tags":"","url":"proc/coesa_atmosphere.html"},{"title":"COESA_density – standard-atmosphere","text":"public  function COESA_density(Z) result(density) a simple version that just returns density Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: Z altitude in meters Return Value real(kind=wp) kg/m&#94;3 Calls proc~~coesa_density~~CallsGraph proc~coesa_density COESA_density proc~geopotential_altitude geopotential_altitude proc~coesa_density->proc~geopotential_altitude proc~mean_molecular_weight_lower mean_molecular_weight_lower proc~coesa_density->proc~mean_molecular_weight_lower proc~mean_molecular_weight_upper mean_molecular_weight_upper proc~coesa_density->proc~mean_molecular_weight_upper proc~pressure_lower pressure_lower proc~coesa_density->proc~pressure_lower proc~pressure_upper pressure_upper proc~coesa_density->proc~pressure_upper proc~temperature_lower temperature_lower proc~coesa_density->proc~temperature_lower proc~temperature_upper temperature_upper proc~coesa_density->proc~temperature_upper proc~mean_molecular_weight_ratio_lower mean_molecular_weight_ratio_lower proc~mean_molecular_weight_lower->proc~mean_molecular_weight_ratio_lower proc~interpolation_index interpolation_index proc~mean_molecular_weight_upper->proc~interpolation_index proc~interpolation_scale_factors interpolation_scale_factors proc~mean_molecular_weight_upper->proc~interpolation_scale_factors proc~find find proc~pressure_lower->proc~find proc~pressure_upper->proc~interpolation_index proc~pressure_upper->proc~interpolation_scale_factors proc~tm Tm proc~temperature_lower->proc~tm proc~interpolation_index->proc~find proc~mean_molecular_weight_ratio_lower->proc~find proc~tm->proc~find Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code function COESA_density ( Z ) result ( density ) !! a simple version that just returns density real ( wp ), intent ( in ) :: Z !! altitude in meters real ( wp ) :: density !! kg/m&#94;3 real ( wp ) :: H , M , T , P if ( Z < - 500 0.0_wp ) then error stop \"altitude below lower bound of -5000 m\" else if ( Z > 100000 0.0_wp ) then error stop \"altitude above upper bound of 1000000 m\" else if ( Z < 8600 0.0_wp ) then H = geopotential_altitude ( Z ) M = mean_molecular_weight_lower ( Z ) T = temperature_lower ( H , M ) P = pressure_lower ( H ) else T = temperature_upper ( Z ) P = pressure_upper ( Z ) M = mean_molecular_weight_upper ( Z ) end if density = P * M / ( Rstar * T ) end function COESA_density","tags":"","url":"proc/coesa_density.html"},{"title":"coesa_initialize – standard-atmosphere","text":"public  subroutine coesa_initialize() Arguments None Source Code subroutine coesa_initialize () integer :: i real ( wp ), dimension (:), allocatable :: Tmb , Pb Tmb = [ 28 8.15_wp ] ! (K) do i = 1 , ( size ( Hb ) - 1 ) Tmb = [ Tmb , Tmb ( i ) + Lmb ( i ) * ( Hb ( i + 1 ) - Hb ( i ))] end do Pb = [ 10132 5.0_wp ] do i = 1 , ( size ( Hb ) - 1 ) if ( Lmb ( i ) == 0 ) then Pb = [ Pb , Pb ( i ) * exp ( - g0 * M0 * ( Hb ( i + 1 ) - Hb ( i )) / ( Rstar * Tmb ( i )))] else Pb = [ Pb , Pb ( i ) * ( Tmb ( i ) / ( Tmb ( i ) + Lmb ( i ) * ( Hb ( i + 1 ) - Hb ( i )))) ** ( g0 * M0 / ( Rstar * Lmb ( i )))] end if end do write ( * , * ) '' ! E30.18E3 for doubles write ( * , '(A/,*(ss,E46.35E5,\"_wp, &\"/))' ) 'Tmb = [' , Tmb write ( * , * ) '' write ( * , '(A/,*(ss,E46.35E5,\"_wp, &\"/))' ) 'Pb = [' , Pb write ( * , * ) '' end subroutine coesa_initialize","tags":"","url":"proc/coesa_initialize.html"},{"title":"interpolation_scale_factors – standard-atmosphere","text":"private pure subroutine interpolation_scale_factors(i, Z, scale0, scale1, scale2) Arguments Type Intent Optional Attributes Name integer, intent(in) :: i real(kind=wp), intent(in) :: Z real(kind=wp), intent(out) :: scale0 real(kind=wp), intent(out) :: scale1 real(kind=wp), intent(out) :: scale2 Called by proc~~interpolation_scale_factors~~CalledByGraph proc~interpolation_scale_factors interpolation_scale_factors proc~mean_molecular_weight_upper mean_molecular_weight_upper proc~mean_molecular_weight_upper->proc~interpolation_scale_factors proc~pressure_upper pressure_upper proc~pressure_upper->proc~interpolation_scale_factors proc~coesa_atmosphere COESA_atmosphere proc~coesa_atmosphere->proc~mean_molecular_weight_upper proc~coesa_atmosphere->proc~pressure_upper proc~coesa_density COESA_density proc~coesa_density->proc~mean_molecular_weight_upper proc~coesa_density->proc~pressure_upper Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code pure subroutine interpolation_scale_factors ( i , Z , scale0 , scale1 , scale2 ) integer , intent ( in ) :: i real ( wp ), intent ( in ) :: Z real ( wp ), intent ( out ) :: scale0 , scale1 , scale2 real ( wp ) :: Z0 , Z1 , Z2 Z0 = Ztableupper ( i - 1 ) Z1 = Ztableupper ( i ) Z2 = Ztableupper ( i + 1 ) scale0 = ( Z - Z1 ) * ( Z - Z2 ) / (( Z0 - Z1 ) * ( Z0 - Z2 )) scale1 = ( Z - Z0 ) * ( Z - Z2 ) / (( Z1 - Z0 ) * ( Z1 - Z2 )) scale2 = ( Z - Z0 ) * ( Z - Z1 ) / (( Z2 - Z0 ) * ( Z2 - Z1 )) end subroutine interpolation_scale_factors","tags":"","url":"proc/interpolation_scale_factors.html"},{"title":"COESA_module – standard-atmosphere","text":"1976 Standard Atmosphere Model History Original Julia code from: https://github.com/danielmatz/COESA.jl [MIT License] Jacob Williams, converted to Fortran 4/30/2020 Uses iso_fortran_env module~~coesa_module~~UsesGraph module~coesa_module COESA_module iso_fortran_env iso_fortran_env module~coesa_module->iso_fortran_env Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Variables Type Visibility Attributes Name Initial integer, private, parameter :: wp = real64 Real working precision if not specified [8 bytes] integer, public, parameter :: coesa_wp = wp real kind to export from the module real(kind=wp), private, parameter :: r0 = 6356766.0_wp real(kind=wp), private, parameter :: g0 = 9.80665_wp real(kind=wp), private, parameter :: M0 = 28.9644_wp real(kind=wp), private, parameter :: Rstar = 8.31432e3_wp real(kind=wp), private, parameter :: gamma = 1.4_wp real(kind=wp), private, parameter,               dimension(*) :: Hb = [0.0_wp, 11.0_wp, 20.0_wp, 32.0_wp, 47.0_wp, 51.0_wp, 71.0_wp]*1000.0_wp real(kind=wp), private, parameter,               dimension(*) :: Lmb = [-6.5_wp, 0.0_wp, 1.0_wp, 2.8_wp, 0.0_wp, -2.8_wp, -2.0_wp]/1000.0_wp real(kind=wp), private, parameter,               dimension(*) :: Ztable = [80.0_wp, 80.5_wp, 81.0_wp, 81.5_wp, 82.0_wp, 82.5_wp, 83.0_wp, 83.5_wp, 84.0_wp, 84.5_wp, 85.0_wp, 85.5_wp, 86.0_wp]*1000.0_wp real(kind=wp), private, parameter,               dimension(*) :: Mratiotable = [1.0_wp, 0.999996_wp, 0.999989_wp, 0.999971_wp, 0.999941_wp, 0.999909_wp, 0.999870_wp, 0.999829_wp, 0.999786_wp, 0.999741_wp, 0.999694_wp, 0.999641_wp, 0.999579_wp] real(kind=wp), private, parameter,               dimension(*) :: Ztableupper = [86000.0_wp, 87000.0_wp, 88000.0_wp, 89000.0_wp, 90000.0_wp, 91000.0_wp, 93000.0_wp, 95000.0_wp, 97000.0_wp, 99000.0_wp, 101000.0_wp, 103000.0_wp, 105000.0_wp, 107000.0_wp, 109000.0_wp, 110000.0_wp, 111000.0_wp, 112000.0_wp, 113000.0_wp, 114000.0_wp, 115000.0_wp, 116000.0_wp, 117000.0_wp, 118000.0_wp, 119000.0_wp, 120000.0_wp, 125000.0_wp, 130000.0_wp, 135000.0_wp, 140000.0_wp, 145000.0_wp, 150000.0_wp, 160000.0_wp, 170000.0_wp, 180000.0_wp, 190000.0_wp, 200000.0_wp, 210000.0_wp, 220000.0_wp, 230000.0_wp, 240000.0_wp, 250000.0_wp, 260000.0_wp, 270000.0_wp, 280000.0_wp, 290000.0_wp, 300000.0_wp, 310000.0_wp, 320000.0_wp, 330000.0_wp, 340000.0_wp, 350000.0_wp, 360000.0_wp, 370000.0_wp, 380000.0_wp, 390000.0_wp, 400000.0_wp, 410000.0_wp, 420000.0_wp, 430000.0_wp, 440000.0_wp, 450000.0_wp, 460000.0_wp, 470000.0_wp, 480000.0_wp, 490000.0_wp, 500000.0_wp, 525000.0_wp, 550000.0_wp, 575000.0_wp, 600000.0_wp, 625000.0_wp, 650000.0_wp, 675000.0_wp, 700000.0_wp, 725000.0_wp, 750000.0_wp, 775000.0_wp, 800000.0_wp, 825000.0_wp, 850000.0_wp, 875000.0_wp, 900000.0_wp, 925000.0_wp, 950000.0_wp, 975000.0_wp, 1000000.0_wp] real(kind=wp), private, parameter,               dimension(*) :: Ptableupper = [3.7338E-1_wp, 3.1259E-1_wp, 2.6173E-1_wp, 2.1919E-1_wp, 1.8359E-1_wp, 1.5381E-1_wp, 1.0801E-1_wp, 7.5966E-2_wp, 5.3571E-2_wp, 3.7948E-2_wp, 2.7192E-2_wp, 1.9742E-2_wp, 1.4477E-2_wp, 1.0751E-2_wp, 8.1142E-3_wp, 7.1042E-3_wp, 6.2614E-3_wp, 5.5547E-3_wp, 4.9570E-3_wp, 4.4473E-3_wp, 4.0096E-3_wp, 3.6312E-3_wp, 3.3022E-3_wp, 3.0144E-3_wp, 2.7615E-3_wp, 2.5382E-3_wp, 1.7354E-3_wp, 1.2505E-3_wp, 9.3568E-4_wp, 7.2028E-4_wp, 5.6691E-4_wp, 4.5422E-4_wp, 3.0395E-4_wp, 2.1210E-4_wp, 1.5271E-4_wp, 1.1266E-4_wp, 8.4736E-5_wp, 6.4756E-5_wp, 5.0149E-5_wp, 3.9276E-5_wp, 3.1059E-5_wp, 2.4767E-5_wp, 1.9894E-5_wp, 1.6083E-5_wp, 1.3076E-5_wp, 1.0683E-5_wp, 8.7704E-6_wp, 7.2285E-6_wp, 5.9796E-6_wp, 4.9630E-6_wp, 4.1320E-6_wp, 3.4498E-6_wp, 2.8878E-6_wp, 2.4234E-6_wp, 2.0384E-6_wp, 1.7184E-6_wp, 1.4518E-6_wp, 1.2291E-6_wp, 1.0427E-6_wp, 8.8645E-7_wp, 7.5517E-7_wp, 6.4468E-7_wp, 5.5155E-7_wp, 4.7292E-7_wp, 4.0642E-7_wp, 3.5011E-7_wp, 3.0236E-7_wp, 2.1200E-7_wp, 1.5137E-7_wp, 1.1028E-7_wp, 8.2130E-8_wp, 6.2601E-8_wp, 4.8865E-8_wp, 3.9048E-8_wp, 3.1908E-8_wp, 2.6611E-8_wp, 2.2599E-8_wp, 1.9493E-8_wp, 1.7036E-8_wp, 1.5051E-8_wp, 1.3415E-8_wp, 1.2043E-8_wp, 1.0873E-8_wp, 9.8635E-9_wp, 8.9816E-9_wp, 8.2043E-9_wp, 7.5138E-9_wp] real(kind=wp), private, parameter,               dimension(*) :: logPtableupper = log(Ptableupper) real(kind=wp), private, parameter,               dimension(*) :: Mtableupper = [28.95_wp, 28.95_wp, 28.94_wp, 28.93_wp, 28.91_wp, 28.89_wp, 28.82_wp, 28.73_wp, 28.62_wp, 28.48_wp, 28.30_wp, 28.10_wp, 27.88_wp, 27.64_wp, 27.39_wp, 27.27_wp, 27.14_wp, 27.02_wp, 26.90_wp, 26.79_wp, 26.68_wp, 26.58_wp, 26.48_wp, 26.38_wp, 26.29_wp, 26.20_wp, 25.80_wp, 25.44_wp, 25.09_wp, 24.75_wp, 24.42_wp, 24.10_wp, 23.49_wp, 22.90_wp, 22.34_wp, 21.81_wp, 21.30_wp, 20.83_wp, 20.37_wp, 19.95_wp, 19.56_wp, 19.19_wp, 18.85_wp, 18.53_wp, 18.24_wp, 17.97_wp, 17.73_wp, 17.50_wp, 17.29_wp, 17.09_wp, 16.91_wp, 16.74_wp, 16.57_wp, 16.42_wp, 16.27_wp, 16.13_wp, 15.98_wp, 15.84_wp, 15.70_wp, 15.55_wp, 15.40_wp, 15.25_wp, 15.08_wp, 14.91_wp, 14.73_wp, 14.54_wp, 14.33_wp, 13.76_wp, 13.09_wp, 12.34_wp, 11.51_wp, 10.62_wp, 9.72_wp, 8.83_wp, 8.00_wp, 7.24_wp, 6.58_wp, 6.01_wp, 5.54_wp, 5.16_wp, 4.85_wp, 4.60_wp, 4.40_wp, 4.25_wp, 4.12_wp, 4.02_wp, 3.94_wp] real(kind=wp), private, parameter,               dimension(*) :: Tmb = [0.288150e+03_wp, 0.216650e+03_wp, 0.216650e+03_wp, 0.228650e+03_wp, 0.270650e+03_wp, 0.270650e+03_wp, 0.214650e+03_wp] real(kind=wp), private, parameter,               dimension(*) :: Pb = [0.10132500000000000000000000000000000e+06_wp, 0.22632063973462930198630411197384694e+05_wp, 0.54748886696777795581076674036743120e+04_wp, 0.86801868475522733011515546755612576e+03_wp, 0.11090630555496587730129362892520126e+03_wp, 0.66938873118687266040989982519838630e+02_wp, 0.39564204280407286536355835964046252e+01_wp] Derived Types type, public :: State Components Type Visibility Attributes Name Initial real(kind=wp), public :: mean_molecular_weight = 0.0_wp real(kind=wp), public :: temperature = 0.0_wp real(kind=wp), public :: pressure = 0.0_wp real(kind=wp), public :: speed_of_sound = 0.0_wp Type-Bound Procedures procedure, public :: density Functions private pure function find (x, xvec) result(i) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: x real(kind=wp), intent(in), dimension(:) :: xvec Return Value integer private pure function density (s) Arguments Type Intent Optional Attributes Name class( State ), intent(in) :: s Return Value real(kind=wp) private pure function geopotential_altitude (Z) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: Z Return Value real(kind=wp) private pure function Tm (H) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: H Return Value real(kind=wp) private pure function temperature_lower (H, M) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: H real(kind=wp), intent(in) :: M Return Value real(kind=wp) private pure function pressure_lower (H) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: H Return Value real(kind=wp) private pure function speed_of_sound_lower (T, M) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: T real(kind=wp), intent(in) :: M Return Value real(kind=wp) private pure function mean_molecular_weight_ratio_lower (Z) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: Z Return Value real(kind=wp) private pure function mean_molecular_weight_lower (Z) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: Z Return Value real(kind=wp) private pure function temperature_upper (Z) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: Z Return Value real(kind=wp) private pure function interpolation_index (Z) result(i) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: Z Return Value integer private pure function pressure_upper (Z) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: Z Return Value real(kind=wp) private pure function mean_molecular_weight_upper (Z) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: Z Return Value real(kind=wp) private pure function speed_of_sound_86km () Arguments None Return Value real(kind=wp) private pure function dynamic_viscosity (Z, T) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: Z altitude (m) real(kind=wp), intent(in) :: T temperature (K) Return Value real(kind=wp) public  function COESA_atmosphere (Z) result(s) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: Z Return Value type( State ) public  function COESA_density (Z) result(density) a simple version that just returns density Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: Z altitude in meters Return Value real(kind=wp) kg/m&#94;3 Subroutines public  subroutine coesa_initialize () Arguments None private pure subroutine interpolation_scale_factors (i, Z, scale0, scale1, scale2) Arguments Type Intent Optional Attributes Name integer, intent(in) :: i real(kind=wp), intent(in) :: Z real(kind=wp), intent(out) :: scale0 real(kind=wp), intent(out) :: scale1 real(kind=wp), intent(out) :: scale2","tags":"","url":"module/coesa_module.html"},{"title":"COESA.F90 – standard-atmosphere","text":"Source Code !************************************************************************************ !> !  1976 Standard Atmosphere Model ! !### History !  * Original Julia code from: https://github.com/danielmatz/COESA.jl [MIT License] !  * Jacob Williams, converted to Fortran 4/30/2020 module COESA_module use , intrinsic :: iso_fortran_env implicit none private #ifdef REAL32 integer , parameter , private :: wp = real32 !! Real working precision [4 bytes] #elif REAL64 integer , parameter , private :: wp = real64 !! Real working precision [8 bytes] #elif REAL128 integer , parameter , private :: wp = real128 !! Real working precision [16 bytes] #else integer , parameter , private :: wp = real64 !! Real working precision if not specified [8 bytes] #endif integer , parameter , public :: coesa_wp = wp !! real kind to export from the module real ( wp ), parameter :: r0 = 635676 6.0_wp ! (m), effective Earth radius at 45 deg N latitude real ( wp ), parameter :: g0 = 9.80665_wp ! (m / s&#94;2) or (m&#94;2 / s&#94;2 m') real ( wp ), parameter :: M0 = 2 8.9644_wp ! (kg / kmol) real ( wp ), parameter :: Rstar = 8.31432e3_wp ! (N m / kmol K) real ( wp ), parameter :: gamma = 1.4_wp real ( wp ), dimension ( * ), parameter :: Hb = [ 0.0_wp , 1 1.0_wp , 2 0.0_wp , 3 2.0_wp , 4 7.0_wp , 5 1.0_wp , 7 1.0_wp ] * 100 0.0_wp ! (m') real ( wp ), dimension ( * ), parameter :: Lmb = [ - 6.5_wp , 0.0_wp , 1.0_wp , 2.8_wp , 0.0_wp , - 2.8_wp , - 2.0_wp ] / 100 0.0_wp ! (K / m') real ( wp ), dimension ( * ), parameter :: Ztable = [ 8 0.0_wp , 8 0.5_wp , 8 1.0_wp , 8 1.5_wp , 8 2.0_wp , 8 2.5_wp , 8 3.0_wp , & 8 3.5_wp , 8 4.0_wp , 8 4.5_wp , 8 5.0_wp , 8 5.5_wp , 8 6.0_wp ] * 100 0.0_wp ! (m) real ( wp ), dimension ( * ), parameter :: Mratiotable = [ 1.0_wp , 0.999996_wp , 0.999989_wp , 0.999971_wp , 0.999941_wp , & 0.999909_wp , 0.999870_wp , 0.999829_wp , 0.999786_wp , 0.999741_wp , & 0.999694_wp , 0.999641_wp , 0.999579_wp ] ! based on David's code, which was based on Regan ! M and log(P) are interpolated quadratically real ( wp ), dimension ( * ), parameter :: Ztableupper = [& 8600 0.0_wp , 8700 0.0_wp , 8800 0.0_wp , 8900 0.0_wp , 9000 0.0_wp , 9100 0.0_wp , 9300 0.0_wp , & 9500 0.0_wp , 9700 0.0_wp , 9900 0.0_wp , 10100 0.0_wp , 10300 0.0_wp , 10500 0.0_wp , 10700 0.0_wp , & 10900 0.0_wp , 11000 0.0_wp , 11100 0.0_wp , 11200 0.0_wp , 11300 0.0_wp , 11400 0.0_wp , 11500 0.0_wp , & 11600 0.0_wp , 11700 0.0_wp , 11800 0.0_wp , 11900 0.0_wp , 12000 0.0_wp , 12500 0.0_wp , 13000 0.0_wp , & 13500 0.0_wp , 14000 0.0_wp , 14500 0.0_wp , 15000 0.0_wp , 16000 0.0_wp , 17000 0.0_wp , 18000 0.0_wp , & 19000 0.0_wp , 20000 0.0_wp , 21000 0.0_wp , 22000 0.0_wp , 23000 0.0_wp , 24000 0.0_wp , 25000 0.0_wp , & 26000 0.0_wp , 27000 0.0_wp , 28000 0.0_wp , 29000 0.0_wp , 30000 0.0_wp , 31000 0.0_wp , 32000 0.0_wp , & 33000 0.0_wp , 34000 0.0_wp , 35000 0.0_wp , 36000 0.0_wp , 37000 0.0_wp , 38000 0.0_wp , 39000 0.0_wp , & 40000 0.0_wp , 41000 0.0_wp , 42000 0.0_wp , 43000 0.0_wp , 44000 0.0_wp , 45000 0.0_wp , 46000 0.0_wp , & 47000 0.0_wp , 48000 0.0_wp , 49000 0.0_wp , 50000 0.0_wp , 52500 0.0_wp , 55000 0.0_wp , 57500 0.0_wp , & 60000 0.0_wp , 62500 0.0_wp , 65000 0.0_wp , 67500 0.0_wp , 70000 0.0_wp , 72500 0.0_wp , 75000 0.0_wp , & 77500 0.0_wp , 80000 0.0_wp , 82500 0.0_wp , 85000 0.0_wp , 87500 0.0_wp , 90000 0.0_wp , 92500 0.0_wp , & 95000 0.0_wp , 97500 0.0_wp , 100000 0.0_wp ] ! (m) real ( wp ), dimension ( * ), parameter :: Ptableupper = [& 3.7338E-1_wp , 3.1259E-1_wp , 2.6173E-1_wp , 2.1919E-1_wp , 1.8359E-1_wp , & 1.5381E-1_wp , 1.0801E-1_wp , 7.5966E-2_wp , 5.3571E-2_wp , 3.7948E-2_wp , 2.7192E-2_wp , & 1.9742E-2_wp , 1.4477E-2_wp , 1.0751E-2_wp , 8.1142E-3_wp , 7.1042E-3_wp , 6.2614E-3_wp , & 5.5547E-3_wp , 4.9570E-3_wp , 4.4473E-3_wp , 4.0096E-3_wp , 3.6312E-3_wp , 3.3022E-3_wp , & 3.0144E-3_wp , 2.7615E-3_wp , 2.5382E-3_wp , 1.7354E-3_wp , 1.2505E-3_wp , 9.3568E-4_wp , & 7.2028E-4_wp , 5.6691E-4_wp , 4.5422E-4_wp , 3.0395E-4_wp , 2.1210E-4_wp , 1.5271E-4_wp , & 1.1266E-4_wp , 8.4736E-5_wp , 6.4756E-5_wp , 5.0149E-5_wp , 3.9276E-5_wp , 3.1059E-5_wp , & 2.4767E-5_wp , 1.9894E-5_wp , 1.6083E-5_wp , 1.3076E-5_wp , 1.0683E-5_wp , 8.7704E-6_wp , & 7.2285E-6_wp , 5.9796E-6_wp , 4.9630E-6_wp , 4.1320E-6_wp , 3.4498E-6_wp , 2.8878E-6_wp , & 2.4234E-6_wp , 2.0384E-6_wp , 1.7184E-6_wp , 1.4518E-6_wp , 1.2291E-6_wp , 1.0427E-6_wp , & 8.8645E-7_wp , 7.5517E-7_wp , 6.4468E-7_wp , 5.5155E-7_wp , 4.7292E-7_wp , 4.0642E-7_wp , & 3.5011E-7_wp , 3.0236E-7_wp , 2.1200E-7_wp , 1.5137E-7_wp , 1.1028E-7_wp , 8.2130E-8_wp , & 6.2601E-8_wp , 4.8865E-8_wp , 3.9048E-8_wp , 3.1908E-8_wp , 2.6611E-8_wp , 2.2599E-8_wp , & 1.9493E-8_wp , 1.7036E-8_wp , 1.5051E-8_wp , 1.3415E-8_wp , 1.2043E-8_wp , 1.0873E-8_wp , & 9.8635E-9_wp , 8.9816E-9_wp , 8.2043E-9_wp , 7.5138E-9_wp ] ! (Pa) real ( wp ), dimension ( * ), parameter :: logPtableupper = log ( Ptableupper ) real ( wp ), dimension ( * ), parameter :: Mtableupper = [& 2 8.95_wp , 2 8.95_wp , 2 8.94_wp , 2 8.93_wp , 2 8.91_wp , 2 8.89_wp , 2 8.82_wp , 2 8.73_wp , & 2 8.62_wp , 2 8.48_wp , 2 8.30_wp , 2 8.10_wp , 2 7.88_wp , 2 7.64_wp , 2 7.39_wp , 2 7.27_wp , 2 7.14_wp , 2 7.02_wp , & 2 6.90_wp , 2 6.79_wp , 2 6.68_wp , 2 6.58_wp , 2 6.48_wp , 2 6.38_wp , 2 6.29_wp , 2 6.20_wp , 2 5.80_wp , 2 5.44_wp , & 2 5.09_wp , 2 4.75_wp , 2 4.42_wp , 2 4.10_wp , 2 3.49_wp , 2 2.90_wp , 2 2.34_wp , 2 1.81_wp , 2 1.30_wp , 2 0.83_wp , & 2 0.37_wp , 1 9.95_wp , 1 9.56_wp , 1 9.19_wp , 1 8.85_wp , 1 8.53_wp , 1 8.24_wp , 1 7.97_wp , 1 7.73_wp , 1 7.50_wp , & 1 7.29_wp , 1 7.09_wp , 1 6.91_wp , 1 6.74_wp , 1 6.57_wp , 1 6.42_wp , 1 6.27_wp , 1 6.13_wp , 1 5.98_wp , 1 5.84_wp , & 1 5.70_wp , 1 5.55_wp , 1 5.40_wp , 1 5.25_wp , 1 5.08_wp , 1 4.91_wp , 1 4.73_wp , 1 4.54_wp , 1 4.33_wp , 1 3.76_wp , & 1 3.09_wp , 1 2.34_wp , 1 1.51_wp , 1 0.62_wp , 9.72_wp , 8.83_wp , 8.00_wp , 7.24_wp , 6.58_wp , 6.01_wp , & 5.54_wp , 5.16_wp , 4.85_wp , 4.60_wp , 4.40_wp , 4.25_wp , 4.12_wp , 4.02_wp , 3.94_wp ] ! (kg / kmol) ! ... computed by the initialize() routine: real ( wp ), dimension ( * ), parameter :: Tmb = [ 0.288150e+03_wp , & 0.216650e+03_wp , & 0.216650e+03_wp , & 0.228650e+03_wp , & 0.270650e+03_wp , & 0.270650e+03_wp , & 0.214650e+03_wp ] real ( wp ), dimension ( * ), parameter :: Pb = [ 0.10132500000000000000000000000000000e+06_wp , & 0.22632063973462930198630411197384694e+05_wp , & 0.54748886696777795581076674036743120e+04_wp , & 0.86801868475522733011515546755612576e+03_wp , & 0.11090630555496587730129362892520126e+03_wp , & 0.66938873118687266040989982519838630e+02_wp , & 0.39564204280407286536355835964046252e+01_wp ] type , public :: State real ( wp ) :: mean_molecular_weight = 0.0_wp real ( wp ) :: temperature = 0.0_wp real ( wp ) :: pressure = 0.0_wp real ( wp ) :: speed_of_sound = 0.0_wp contains procedure :: density end type State public :: COESA_atmosphere public :: COESA_density public :: coesa_initialize contains !************************************************************************************ subroutine coesa_initialize () integer :: i real ( wp ), dimension (:), allocatable :: Tmb , Pb Tmb = [ 28 8.15_wp ] ! (K) do i = 1 , ( size ( Hb ) - 1 ) Tmb = [ Tmb , Tmb ( i ) + Lmb ( i ) * ( Hb ( i + 1 ) - Hb ( i ))] end do Pb = [ 10132 5.0_wp ] do i = 1 , ( size ( Hb ) - 1 ) if ( Lmb ( i ) == 0 ) then Pb = [ Pb , Pb ( i ) * exp ( - g0 * M0 * ( Hb ( i + 1 ) - Hb ( i )) / ( Rstar * Tmb ( i )))] else Pb = [ Pb , Pb ( i ) * ( Tmb ( i ) / ( Tmb ( i ) + Lmb ( i ) * ( Hb ( i + 1 ) - Hb ( i )))) ** ( g0 * M0 / ( Rstar * Lmb ( i )))] end if end do write ( * , * ) '' ! E30.18E3 for doubles write ( * , '(A/,*(ss,E46.35E5,\"_wp, &\"/))' ) 'Tmb = [' , Tmb write ( * , * ) '' write ( * , '(A/,*(ss,E46.35E5,\"_wp, &\"/))' ) 'Pb = [' , Pb write ( * , * ) '' end subroutine coesa_initialize pure function find ( x , xvec ) result ( i ) real ( wp ), intent ( in ) :: x real ( wp ), dimension (:), intent ( in ) :: xvec integer :: i i = 1 do if ( i >= size ( xvec )) exit if ( x <= xvec ( i + 1 )) exit i = i + 1 end do end function find pure real ( wp ) function density ( s ) class ( State ), intent ( in ) :: s density = s % pressure * s % mean_molecular_weight / ( Rstar * s % temperature ) end function density pure real ( wp ) function geopotential_altitude ( Z ) real ( wp ), intent ( in ) :: Z geopotential_altitude = r0 * Z / ( r0 + Z ) end function geopotential_altitude pure real ( wp ) function Tm ( H ) real ( wp ), intent ( in ) :: H integer :: i i = find ( H , Hb ) Tm = Tmb ( i ) + Lmb ( i ) * ( H - Hb ( i )) end function Tm pure real ( wp ) function temperature_lower ( H , M ) real ( wp ), intent ( in ) :: H real ( wp ), intent ( in ) :: M temperature_lower = Tm ( H ) / M0 * M end function temperature_lower pure real ( wp ) function pressure_lower ( H ) real ( wp ), intent ( in ) :: H integer :: i i = find ( H , Hb ) if ( Lmb ( i ) == 0 ) then pressure_lower = Pb ( i ) * exp ( - g0 * M0 * ( H - Hb ( i )) / ( Rstar * Tmb ( i ))) else pressure_lower = Pb ( i ) * ( Tmb ( i ) / ( Tmb ( i ) + Lmb ( i ) * ( H - Hb ( i )))) ** ( g0 * M0 / ( Rstar * Lmb ( i ))) end if end function pressure_lower pure real ( wp ) function speed_of_sound_lower ( T , M ) real ( wp ), intent ( in ) :: T , M speed_of_sound_lower = sqrt ( gamma * Rstar * T / M ) end function speed_of_sound_lower pure real ( wp ) function mean_molecular_weight_ratio_lower ( Z ) real ( wp ), intent ( in ) :: Z integer :: i if ( Z < Ztable ( 1 )) then mean_molecular_weight_ratio_lower = 1.0_wp else if ( Z > Ztable ( size ( Ztable ))) then error stop \"altitude above maximum value in table\" else i = find ( Z , Ztable ) mean_molecular_weight_ratio_lower = & Mratiotable ( i ) + ( Mratiotable ( i + 1 ) - Mratiotable ( i )) / & ( Ztable ( i + 1 ) - Ztable ( i )) * ( Z - Ztable ( i )) end if end function mean_molecular_weight_ratio_lower pure real ( wp ) function mean_molecular_weight_lower ( Z ) real ( wp ), intent ( in ) :: Z mean_molecular_weight_lower = M0 * mean_molecular_weight_ratio_lower ( Z ) end function mean_molecular_weight_lower pure real ( wp ) function temperature_upper ( Z ) real ( wp ), intent ( in ) :: Z real ( wp ) :: Tc , A , aa , T9 , LK9 , Z9 , T10 , Z10 , Tinf , lambda , xi if ( Z <= 9100 0.0_wp ) then temperature_upper = 18 6.8673_wp ! (K) elseif ( Z <= 11000 0.0_wp ) then Tc = 26 3.1905_wp ! (K) A = - 7 6.3232_wp ! (K) aa = - 1 9.9429_wp * 100 0.0_wp ! (m) temperature_upper = Tc + A * sqrt ( 1.0_wp - (( Z - 9100 0.0_wp ) / aa ) ** 2 ) elseif ( Z <= 12000 0.0_wp ) then T9 = 24 0.0_wp ! (K) LK9 = 1 2.0_wp / 100 0.0_wp ! (K / m) Z9 = 11000 0.0_wp ! (m) temperature_upper = T9 + LK9 * ( Z - Z9 ) elseif ( Z <= 100000 0.0_wp ) then T10 = 36 0.0_wp ! (K) Z10 = 12000 0.0_wp ! (m) Tinf = 100 0.0_wp ! (K) lambda = 0.01875_wp / 100 0.0_wp ! (1 / m) xi = ( Z - Z10 ) * ( r0 + Z10 ) / ( r0 + Z ) temperature_upper = Tinf - ( Tinf - T10 ) * exp ( - lambda * xi ) end if end function temperature_upper pure integer function interpolation_index ( Z ) result ( i ) real ( wp ), intent ( in ) :: Z ! Find the index for the lower side of the altitude interval i = find ( Z , Ztableupper ) ! We are going to reference all elements from i - 1 to i + 1, so we need to ! adjust the index away from the boundaries if ( i == 1 ) i = 2 end function interpolation_index pure subroutine interpolation_scale_factors ( i , Z , scale0 , scale1 , scale2 ) integer , intent ( in ) :: i real ( wp ), intent ( in ) :: Z real ( wp ), intent ( out ) :: scale0 , scale1 , scale2 real ( wp ) :: Z0 , Z1 , Z2 Z0 = Ztableupper ( i - 1 ) Z1 = Ztableupper ( i ) Z2 = Ztableupper ( i + 1 ) scale0 = ( Z - Z1 ) * ( Z - Z2 ) / (( Z0 - Z1 ) * ( Z0 - Z2 )) scale1 = ( Z - Z0 ) * ( Z - Z2 ) / (( Z1 - Z0 ) * ( Z1 - Z2 )) scale2 = ( Z - Z0 ) * ( Z - Z1 ) / (( Z2 - Z0 ) * ( Z2 - Z1 )) end subroutine interpolation_scale_factors pure real ( wp ) function pressure_upper ( Z ) real ( wp ), intent ( in ) :: Z integer :: i real ( wp ) :: logP0 , logP1 , logP2 , logP , scale0 , scale1 , scale2 i = interpolation_index ( Z ) call interpolation_scale_factors ( i , Z , scale0 , scale1 , scale2 ) logP0 = logPtableupper ( i - 1 ) logP1 = logPtableupper ( i ) logP2 = logPtableupper ( i + 1 ) logP = logP0 * scale0 + logP1 * scale1 + logP2 * scale2 pressure_upper = exp ( logP ) end function pressure_upper pure real ( wp ) function mean_molecular_weight_upper ( Z ) real ( wp ), intent ( in ) :: Z integer :: i real ( wp ) :: M0 , M1 , M2 , scale0 , scale1 , scale2 i = interpolation_index ( Z ) call interpolation_scale_factors ( i , Z , scale0 , scale1 , scale2 ) M0 = Mtableupper ( i - 1 ) M1 = Mtableupper ( i ) M2 = Mtableupper ( i + 1 ) mean_molecular_weight_upper = M0 * scale0 + M1 * scale1 + M2 * scale2 end function mean_molecular_weight_upper pure real ( wp ) function speed_of_sound_86km () real ( wp ), parameter :: Z = 8600 0.0_wp ! (m) real ( wp ) :: H , M , T H = geopotential_altitude ( Z ) M = mean_molecular_weight_lower ( Z ) T = temperature_lower ( H , M ) speed_of_sound_86km = speed_of_sound_lower ( T , M ) end function speed_of_sound_86km pure real ( wp ) function dynamic_viscosity ( Z , T ) real ( wp ), intent ( in ) :: Z !! altitude (m) real ( wp ), intent ( in ) :: T !! temperature (K) if ( Z > 8600 0.0_wp ) error stop 'unable to compute dynamic viscosity above 86km' dynamic_viscosity = 1.458e-6_wp * T ** ( 3.0_wp / 2.0_wp ) / ( T + 11 0.4_wp ) end function dynamic_viscosity function COESA_atmosphere ( Z ) result ( s ) real ( wp ), intent ( in ) :: Z ! altitude in meters type ( state ) :: s real ( wp ) :: H , M , T , P , c if ( Z < - 500 0.0_wp ) then error stop \"altitude below lower bound of -5000 m\" else if ( Z > 100000 0.0_wp ) then error stop \"altitude above upper bound of 1000000 m\" else if ( Z < 8600 0.0_wp ) then H = geopotential_altitude ( Z ) M = mean_molecular_weight_lower ( Z ) T = temperature_lower ( H , M ) P = pressure_lower ( H ) c = speed_of_sound_lower ( T , M ) else T = temperature_upper ( Z ) P = pressure_upper ( Z ) M = mean_molecular_weight_upper ( Z ) c = speed_of_sound_86km () end if s = State ( M , T , P , c ) end function COESA_atmosphere function COESA_density ( Z ) result ( density ) !! a simple version that just returns density real ( wp ), intent ( in ) :: Z !! altitude in meters real ( wp ) :: density !! kg/m&#94;3 real ( wp ) :: H , M , T , P if ( Z < - 500 0.0_wp ) then error stop \"altitude below lower bound of -5000 m\" else if ( Z > 100000 0.0_wp ) then error stop \"altitude above upper bound of 1000000 m\" else if ( Z < 8600 0.0_wp ) then H = geopotential_altitude ( Z ) M = mean_molecular_weight_lower ( Z ) T = temperature_lower ( H , M ) P = pressure_lower ( H ) else T = temperature_upper ( Z ) P = pressure_upper ( Z ) M = mean_molecular_weight_upper ( Z ) end if density = P * M / ( Rstar * T ) end function COESA_density !************************************************************************************ end module COESA_module !************************************************************************************","tags":"","url":"sourcefile/coesa.f90.html"}]}